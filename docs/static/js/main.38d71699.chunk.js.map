{"version":3,"sources":["components/Feed/Feed.module.scss","components/Feed/Github.js","components/Feed/Reddit.js","components/Feed/ProductHunt.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","setFeed","title","a","axios","get","data","localStorage","setItem","JSON","stringify","Github","cached","getItem","useState","parse","feed","useEffect","fetchFeed","className","styles","root","toLowerCase","Array","isArray","map","item","i","key","href","target","rel","link","meta","stars","heading","name","description","children","Reddit","subreddit","selftext","substr","match","src","image","thumbnail","domain","permalink","num_comments","parser","RSSParser","parseURL","items","ProductHunt","fetchRSS","id","content","str","len","append","newLength","indexOf","length","tempString","substring","replace","truncate","contentSnippet","App","style","display","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38d71699.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Feed_root__ERD0b\",\"title\":\"Feed_title__4Lr9m\",\"heading\":\"Feed_heading__1x10a\",\"link\":\"Feed_link__1QFyY\",\"item\":\"Feed_item__2oHqb\",\"description\":\"Feed_description__V-NiK\",\"meta\":\"Feed_meta__u9N5j\",\"image\":\"Feed_image__1Sx4s\"};","/* global localStorage */\nimport React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport styles from './Feed.module.scss'\n\nasync function fetchFeed (url, setFeed, title) {\n  const { data } = await axios.get(url)\n  localStorage.setItem(`feed:${title}`, JSON.stringify(data))\n  setFeed(data)\n}\n\nconst Github = ({ url, title }) => {\n  const cached = localStorage.getItem(`feed:${title}`)\n  const [feed, setFeed] = useState(cached ? JSON.parse(cached) : {})\n  useEffect(() => {\n    fetchFeed(url, setFeed, title)\n  }, [url])\n  return (\n    <div className={styles.root}>\n      <h2 className={styles.title}>#{title.toLowerCase()}</h2>\n      {feed && Array.isArray(feed) && feed.map((item, i) => (\n        <div key={item.url || i} className={styles.item}>\n          <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\" className={styles.link}>\n            <span className={styles.meta}>â˜…{item.stars}</span>\n            <span className={styles.heading}>\n              {item.name}\n            </span>\n          </a>\n          <span className={styles.description}>{item.description}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Github\n","/* global localStorage */\nimport React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport styles from './Feed.module.scss'\n\nconst CORS_PROXY = 'https://cors.ceuk.dev/?url='\n\nasync function fetchFeed (url, setFeed, title) {\n  const { data: { data: { children } } } = await axios.get(url)\n  const data = children.map(({ data }) => data)\n  localStorage.setItem(`feed:${title}`, JSON.stringify(data))\n  setFeed(data)\n}\n\nconst Reddit = ({ url, title }) => {\n  const cached = localStorage.getItem(`feed:${title}`)\n  const [feed, setFeed] = useState(cached ? JSON.parse(cached) : {})\n  useEffect(() => {\n    fetchFeed(CORS_PROXY + url, setFeed, title)\n  }, [url])\n  return (\n    <div className={styles.root}>\n      <h2 className={styles.title}>#{title.toLowerCase()}</h2>\n      {feed && Array.isArray(feed) && feed.map((item, i) => (\n        <div key={item.url || i} className={styles.item}>\n          <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\" className={styles.link}>\n            <span className={styles.meta}>/r/{item.subreddit}</span>\n            <span className={styles.heading}>\n              {item.title}\n            </span>\n          </a>\n          {item.selftext\n            ? <span className={styles.description}>{item.selftext.substr(0, 100) + '...'}</span>\n            : (item.url.match(/\\.(gif|jpe?g|tiff|png|webp|bmp)$/i)\n              ? <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\" className={styles.link}><img src={item.url} className={styles.image}/></a>\n              : (item.thumbnail && item.thumbnail !== 'self' && item.thumbnail !== 'default'\n                ? <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\" className={styles.link}><img src={item.thumbnail} className={styles.image}/></a>\n                : <span className={styles.description}>{item.domain}</span>\n              )\n            )\n          }\n          <a href={`https://old.reddit.com${item.permalink}`} target=\"_blank\" rel=\"noopener noreferrer\" className={styles.description}>\tðŸ’¬ {item.num_comments}</a>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Reddit\n","/* global localStorage */\nimport React, { useEffect, useState } from 'react'\nimport RSSParser from 'rss-parser'\nimport styles from './Feed.module.scss'\n\nconst CORS_PROXY = 'https://cors.ceuk.dev/?url='\n\nasync function fetchRSS (url, setFeed, title) {\n  const parser = new RSSParser()\n  const feed = await parser.parseURL(CORS_PROXY + url)\n  localStorage.setItem(`feed:${title}`, JSON.stringify(feed.items))\n  setFeed(feed.items)\n}\n\nconst ProductHunt = ({ url, title }) => {\n  const cached = localStorage.getItem(`feed:${title}`)\n  const [feed, setFeed] = useState(cached ? JSON.parse(cached) : {})\n  useEffect(() => {\n    fetchRSS(url, setFeed, title)\n  }, [url])\n  return (\n    <div className={styles.root}>\n      <h2 className={styles.title}>#{title.toLowerCase()}</h2>\n      {feed && Array.isArray(feed) && feed.map((item, i) => (\n        <div key={item.id || item.link || i} className={styles.item}>\n          <a href={item.content.match(/(href=\")(.*)(\">Link)/)[2]} target=\"_blank\" rel=\"noopener noreferrer\">\n            {item.title}\n          </a>\n          <span className={styles.description}>{truncate(item.contentSnippet.replace(/Discussion\\n {8}\\|\\n {8}Link/, '').substr(2), 100, 'â€¦')}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nfunction truncate (str, len, append) {\n  var newLength\n  append = append || ''\n  if (str.indexOf(' ') + append.length > len) {\n    return str\n  }\n  str.length + append.length > len ? newLength = len - append.length : newLength = str.length\n  var tempString = str.substring(0, newLength)\n  tempString = tempString.replace(/\\s+\\S*$/, '')\n  if (str.length > len && append.length > 0) {\n    tempString = tempString + append\n  }\n  return tempString || 'No description'\n}\n\nexport default ProductHunt\n","import React from 'react'\nimport Github from './components/Feed/Github'\nimport Reddit from './components/Feed/Reddit'\nimport ProductHunt from './components/Feed/ProductHunt'\n\nfunction App () {\n  return (\n    <div className=\"App\" style={{ display: 'flex' }}>\n      <Github title=\"Github\" url=\"https://github-trending-api.now.sh\" />\n      <Reddit title=\"Reddit\" url=\"https://www.reddit.com/user/calvers70/m/all.json\" />\n      <ProductHunt title=\"Product_Hunt\" url=\"https://www.producthunt.com/feed?category=undefined\" />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/global.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}